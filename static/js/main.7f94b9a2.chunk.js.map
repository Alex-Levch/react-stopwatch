{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","time","setTime","secondClick","setSecondClick","status","setStatus","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","v","next","complete","resultedTime","useMemo","Date","toISOString","slice","className","type","onClick","timeNow","getTime","wait","ReactDOM","render","document","getElementById"],"mappings":"2PAMaA,G,MAAM,WAAO,IAAD,EACCC,mBAAS,GADV,mBAChBC,EADgB,KACVC,EADU,OAEeF,mBAAS,GAFxB,mBAEhBG,EAFgB,KAEHC,EAFG,OAGKJ,mBAAS,WAHd,mBAGhBK,EAHgB,KAGRC,EAHQ,KAKvBC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAUzB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,YAAXR,GACFH,GAAQ,SAAAY,GAAC,OAAIA,EAAI,UAIhB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACX,IAEJ,IA0BMY,EAAeC,mBAAQ,kBAAM,IAAIC,KAAKlB,GACzCmB,cAAcC,MAAM,GAAI,MAAK,CAACpB,IAEjC,OACE,sBAAKqB,UAAU,YAAf,UACE,qBAAKA,UAAU,kBAAf,SACGL,IAEH,sBAAKK,UAAU,qBAAf,UACE,yBACEA,UAAU,iBACVC,KAAK,SACLC,QAAS,WArCflB,EAAU,WAuCa,YAAXD,IAnCG,YAAXA,GACFC,EAAU,WAGZJ,EAAQ,KA0BJ,UAUE,sBAAMoB,UAAsB,YAAXjB,GAAwB,yBAAzC,mBAVF,YAgBE,sBAAMiB,UAAsB,YAAXjB,GAAwB,yBAAzC,qBAIF,wBACEiB,UAAU,iBACVC,KAAK,SACLC,QAAS,YA9CJ,WACX,IAAMC,GAAU,IAAIN,MAAOO,UAEtBD,EAAUtB,EAAe,KAC5BG,EAAU,WAGZF,EAAeqB,GAwCPE,IAJJ,kBASA,wBACEL,UAAU,iBACVC,KAAK,SACLC,QAAS,WA5CftB,EAAQ,IAyCJ,2BCvFR0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7f94b9a2.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport './App.scss';\n\nexport const App = () => {\n  const [time, setTime] = useState(0);\n  const [secondClick, setSecondClick] = useState(0);\n  const [status, setStatus] = useState('stopped');\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === 'started') {\n          setTime(v => v + 1000);\n        }\n      });\n\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [status]);\n\n  const start = () => {\n    setStatus('started');\n  };\n\n  const stop = () => {\n    if (status === 'started') {\n      setStatus('stopped');\n    }\n\n    setTime(0);\n  };\n\n  const wait = () => {\n    const timeNow = new Date().getTime();\n\n    if ((timeNow - secondClick) < 300) {\n      setStatus('waiting');\n    }\n\n    setSecondClick(timeNow);\n  };\n\n  const reset = () => {\n    setTime(0);\n  };\n\n  const resultedTime = useMemo(() => new Date(time)\n    .toISOString().slice(11, 19), [time]);\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch__time\">\n        {resultedTime}\n      </div>\n      <div className=\"stopwatch__buttons\">\n        <button\n          className=\"stopwatch__btn\"\n          type=\"button\"\n          onClick={() => {\n            start();\n            if (status !== 'waiting') {\n              stop();\n            }\n          }}\n        >\n          <span className={status === 'stopped' && 'stopwatch__btn-started'}>\n            Start\n          </span>\n          {` `}\n          /\n          {` `}\n          <span className={status === 'started' && 'stopwatch__btn-stopped'}>\n            Stop\n          </span>\n        </button>\n        <button\n          className=\"stopwatch__btn\"\n          type=\"button\"\n          onClick={() => {\n            wait();\n          }}\n        >\n          Wait\n        </button>\n        <button\n          className=\"stopwatch__btn\"\n          type=\"button\"\n          onClick={() => {\n            reset();\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}